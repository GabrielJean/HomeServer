name: Deploy Terraform

on:
  push:
    branches:
      - main
    paths:
      - 'Terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'Terraform/**'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  TF_IN_AUTOMATION: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Ansible (for ansible-vault)
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Create ansible_vault_password_file
        run: |
          printf "%s" "${{ secrets.ANSIBLE_VAULT_DOCKER }}" > .vault_pass.txt

      - name: Decrypt Terraform tfvars with ansible-vault (if encrypted)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          any=0
          for f in *.tfvars *.tfvars.json; do
            if grep -q "ANSIBLE_VAULT" "$f"; then
              echo "Decrypting $f"
              ansible-vault decrypt --vault-password-file .vault_pass.txt "$f"
              any=1
            fi
          done
          if [ "$any" -eq 0 ]; then
            echo "No encrypted tfvars found."
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Cache Terraform providers and modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            Terraform/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('Terraform/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Configure Terraform plugin cache dir
        run: |
          mkdir -p "$HOME/.terraform.d/plugin-cache"
          echo 'plugin_cache_dir = "'$HOME'/.terraform.d/plugin-cache"' > "$HOME/.terraformrc"
        shell: bash
        working-directory: .

      - name: Terraform Init
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform init -input=false -no-color

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name != 'push' || github.ref != 'refs/heads/main'
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform plan -input=false -no-color

      - name: Terraform Plan (for visibility on main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform plan -input=false -no-color -out=tfplan

      - name: Upload tfplan artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: Terraform/tfplan

  terraform-apply:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: terraform
    runs-on: ubuntu-latest
    environment:
      name: terraform-production
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    defaults:
      run:
        working-directory: Terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Ansible (for ansible-vault)
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Create ansible_vault_password_file
        run: |
          printf "%s" "${{ secrets.ANSIBLE_VAULT_DOCKER }}" > .vault_pass.txt

      - name: Decrypt Terraform tfvars with ansible-vault (if encrypted)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          any=0
          for f in *.tfvars *.tfvars.json; do
            if grep -q "ANSIBLE_VAULT" "$f"; then
              echo "Decrypting $f"
              ansible-vault decrypt --vault-password-file .vault_pass.txt "$f"
              any=1
            fi
          done
          if [ "$any" -eq 0 ]; then
            echo "No encrypted tfvars found."
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Configure Terraform plugin cache dir
        run: |
          mkdir -p "$HOME/.terraform.d/plugin-cache"
          echo 'plugin_cache_dir = "'$HOME'/.terraform.d/plugin-cache"' > "$HOME/.terraformrc"
        shell: bash
        working-directory: .

      - name: Terraform Init
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform init -input=false -no-color

      - name: Download tfplan artifact
        uses: actions/download-artifact@v5
        with:
          name: tfplan
          path: Terraform

      - name: Terraform Apply (requires environment approval)
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform apply -input=false -no-color -auto-approve tfplan

      - name: Run Ansible playbook (pve-ubuntu-base)
        run: |
          ansible-playbook \
            -i ../Ansible/inventory.ini \
            ../Ansible/pve-ubuntu-base.yml \
            --vault-password-file .vault_pass.txt

